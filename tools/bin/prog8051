#!/usr/bin/python

import argparse
import ConfigParser
import math
import threading
import time
import serial
import sys

class Status:
  programming = False
  sectors = 0
  length = 0

description = "Process either a .asm or .hex file and write it to the R31JP"
parser = argparse.ArgumentParser(description=description)

parser.add_argument("-p", "--serial-port",
                    default="/dev/tty.usbserial",
                    metavar="PORT",
                    help="Set programming serial port")
parser.add_argument("-c", "--config",
                    metavar="CONFIG",
                    help="User specified configuration file")
parser.add_argument("file",
                    help="Object file to write to the 8051")

# Initialize all values and read configuration file
args = parser.parse_args()

if args.config:
  config = ConfigParser.ConfigParser()
  try:
    config.read(args.config)
    args.serial_port = config.get("SerialPort", "Port")
  except ConfigParser.NoSectionError:
    print "No config file, or config file error. Trying to read %s " % args.config
    print "Exiting"
    sys.exit(1)

def read():
  try:
    while True:
      data = port.read()
      #sys.stdout.write(data)
      if data == 'D' or data == ">":
        Status.programming = True
      elif data == ".":
        Status.sectors += 1

  except:
    pass

def write(data):
    for char in data:
        port.write(char)
        port.flush()

def progress_bar():
  progress = 0 
  bar_width = 70
  while True:
    if Status.programming == True:
      print "Programming ... "
      sys.stdout.write("0%   [")
      sys.stdout.write("\x1b[%dC]" % (bar_width + 1))
      sys.stdout.write("\x1b[%dD" % (bar_width + 2))
      sys.stdout.flush()
      while True:
        fraction = Status.sectors/Status.length
        if progress < (fraction) * bar_width:
          sys.stdout.write("\x1b[s")
          sys.stdout.write("\x1b[%dD" % (bar_width +10))
          sys.stdout.write("%d" % int(fraction * 100))
          sys.stdout.write("%")
          sys.stdout.write("\x1b[u")
          sys.stdout.write("=>")
          sys.stdout.write("\x1b[1D")
          sys.stdout.flush()
          progress +=1
          if progress > bar_width-2:
            sys.stdout.write("\x1b[s")
            sys.stdout.write("\x1b[%dD" % (bar_width +10))
            sys.stdout.write("%d" % 100)
            sys.stdout.write("%")
            sys.stdout.write("\x1b[u")

    time.sleep(.01)

try:
  port = serial.Serial(args.serial_port, baudrate=9600)
except serial.SerialException:
  print "Serial port %s not found" % args.serial_port
  print "Please confirm you device is plugged in, and the correct port is specified"
  sys.exit(1)

print "Using serial port %s" % args.serial_port
time.sleep(1)

read_thread = threading.Thread(target=read)
read_thread.daemon = True
read_thread.start()

progress_thread = threading.Thread(target=progress_bar)
progress_thread.daemon = True
progress_thread.start()

program = open(args.file, 'r').read()
program = program.replace('\n', '')
program = program.replace('\r', '')
Status.length = len(program) / 37.

write("D")
print "Waiting for Minmon..."

tries = 0
while not Status.programming:
  if tries == 10:
    print "Timeout. Reset R31JP/Confirm MON mode and retry."
    port.close()
    sys.exit(1)
  time.sleep(.1)
  write("D")
  tries +=1

write(program)
time.sleep(.1)
sys.stdout.write("\x1b[1C\n")
sys.stdout.flush()
print "Programming Succeeded!"
port.close()
